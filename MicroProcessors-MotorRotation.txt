noteCODE SEGMENT
ASSUME CS:CODE
ORG 1000H

START:
; YOUR CODE IS WRITTEN HERE


MOV DX, 8001H; address
MOV AL,0;
OUT DX,AL;

;; clear and control
MOV AL,00110010B;
OUT DX,AL;


MOV AL,11011111B;
OUT DX,AL;

; data
L1:
in al,dx;
test al,80h;
jnz L1;

; 8255

mov dx,0FF2BH;
mov al,82h;
out dx,al;



; take the old degree to take a new offset from it
MOV BH,0;

mov bx,offset PastDregree
mov word ptr[bx],0
main_loop:

PUSH BX;
; print the most significant bit of the angle and save it in an array bx, bx+1, bx+2
push si
mov si,85h;
call read;
pop si;

mov bx,offset degree
MOV [BX],AL
call delay_m
; second digit
push si
mov si,84h;
call read;
pop si;
mov bx,offset degree
MOV [BX+1],AL

call delay_m
; third digit of the angle
push si
mov si,83h;
call read;
pop si;
mov bx,offset degree
MOV [BX+2],AL

call delay_m
; speed MSB 
MOV BX,OFFSET SPEED;
push si
mov si,81h;
call read;
pop si;
mov BYTE PTR[bx],al
call delay_m

push si
mov si,80h;
call read;
pop si;
mov BYTE PTR[bx+1],al
call delay_m

; ADDRESS
mov dx,8001h;
MOV AL,82H
out dx,al;

;Take the MSB*100, store it si, then take 2nd bit *10 and add it to si, then add the last bit
PUSH SI

MOV SI,0
MOV BX,OFFSET DEGREE;
MOV AL, byte ptr[BX]
MOV AH,0;
MOV BL,100
MUL BL
ADD SI,AX
MOV BX,OFFSET DEGREE;
MOV AL, [BX+1]
MOV AH,0;
MOV BL,10
MUL BL
ADD SI,AX
MOV BX,OFFSET DEGREE;
MOV AL, [BX+2]
MOV AH,0;
MOV BL,1
MUL BL
ADD SI,AX


MOV BX ,OFFSET DecimalDeg; take the decimal value up and store it here
MOV [BX],SI

POP SI





; same as above
PUSH SI
MOV SI,0
MOV BX,OFFSET SPEED;
MOV AL, [BX]
MOV AH,0;
MOV BL,10
MUL BL
ADD SI,AX
MOV BX ,OFFSET SPEED
MOV AL, [BX+1]
MOV AH,0;
MOV BL,1
MUL BL
ADD SI,AX

MOV BX ,OFFSET DecimalSpeed
MOV [BX],SI

POP SI

POP BX;

PUSH BX

MOV BX, OFFSET DecimalDeg
MOV si,[BX]

POP BX

; multiply the valur by 512 since the motor works at 0.703 deg/ step
mov bx,512
mov ax,si
mul bx
mov bx,360
div bx;
mov si,ax;


CALL Prepare_Rotate;

jmp main_loop


rotate:

ror_left:

mov bx ,offset variable
mov al,byte ptr[bx]

mov dx,0FF28H;
out dx,al;

mov bx ,offset variable
rol byte ptr[bx],1
;rol bl,1

call controlled_delay



dec SI;
cmp SI,0
je return_from

JMP ror_left;

return_from:ret




;;;;;;;;;;;;;;;;;;;;;;;;;;;
controlled_delay:

push cx
push si
mov bx,offset DecimalSpeed ;
mov si,word ptr[bx]


cmp si,1
je si_1

cmp si,2
je si_2

cmp si,3
je si_3

cmp si,4
je si_4

cmp si,5
je si_5

cmp si,6
je si_6

cmp si,7
je si_7

cmp si,8
je si_8

cmp si,9
je si_9

cmp si,10
je si_10
jmp default_speed


si_1:
mov cx ,0ffffh;

jmp end_of_comp;


si_2:

mov cx, 0ffffh-1*1819h;
jmp end_of_comp;


si_3:
mov cx, 0ffffh-2*1819h;
jmp end_of_comp;

si_4:
mov cx, 0ffffh-3*1819h;
jmp end_of_comp;


si_5:
mov cx, 0ffffh-4*1819h;
jmp end_of_comp;


si_6:
mov cx, 0ffffh-5*1819h;
jmp end_of_comp;


si_7:
mov cx, 0ffffh-6*1819h;
jmp end_of_comp;


si_8:
mov cx, 0ffffh-7*1819h;
jmp end_of_comp;


si_9:
mov cx, 0ffffh-9*1819h;
jmp end_of_comp;

si_10:
mov cx, 0ffffh-10*1800h;
jmp end_of_comp;


default_speed:
mov cx ,0fffh;

end_of_comp:

delay_lp:
nop;
Loop delay_lp;
pop si
pop cx


ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;

delay_m:
push cx
mov cx ,0fffh
delay_lp1:
nop;
Loop delay_lp1;
pop cx
ret

rotate_right:





ror_right:

mov bx ,offset variable
mov al,byte ptr[bx]
mov ah,0;
mov dx,0FF28H;
out dx,al;

mov bx ,offset variable
ror byte ptr[bx],1
;ror bl,1

call controlled_delay


dec SI;
cmp SI,0
je return_from_r

JMP ror_right;

return_from_r:ret




read:
MOV AX,SI;
mov dx,8001h;
out dx,al;


mov dx,8001h;
IN AL,DX
AND AL,07H
CMP AL,0
JZ read
mov dx,8000h
IN al,dx;
AND AL,00111111B;

DISPLAY:
cmp al,09h;
JE keyzeropressed

cmp al,01h;
JE keyonepressed

cmp al,11h;
JE keytwopressed

cmp al,21h;
JE keythreepressed

cmp al,08h;
JE key4

cmp al,18h;
JE key5

cmp al,28h;
JE key6

cmp al,00h;
JE key7

cmp al,10h;
JE key8

cmp al,20h;
JE key9

jmp read
keyzeropressed:



mov dx ,8000h;
mov al,00001100b;
out dx,al;
mov al,0
ret

keyonepressed:




mov dx ,8000h;
mov al,9FH;
out dx,al;
mov al,1
ret



keytwopressed:



mov dx ,8000h;
mov al,4AH;
out dx,al;
mov al,2
ret



keythreepressed:



mov dx ,8000h;
mov al,0BH;
out dx,al;
mov al,3
ret


key4:



mov dx ,8000h;
mov al,99H;
out dx,al;
mov al,4
ret



key5:



mov dx ,8000h;
mov al,29H;
out dx,al;
mov al,5
ret



key6:



mov dx ,8000h;
mov al,28H;
out dx,al;
mov al,6
ret



key7:



mov dx ,8000h;
mov al,8FH;
out dx,al;
mov al,7
ret



key8:



mov dx ,8000h;
mov al,08H;
out dx,al;
mov al,8
ret


key9:



mov dx ,8000h;
mov al,09h;
out dx,al;
mov al,9
ret

Ret;


Prepare_Rotate:
Push AX
PUSH BX
PUSH SI

Mov bx, OFFSET PastDregree
cmp WORD PTR [bx],360
jne not_equal_360
mov WORD PTR [bx],0
not_equal_360:


Mov bx, OFFSET PastDregree
MOV AX,Word ptr[bx]
cmp ax,0
je equalzero
jmp continue
equalzero :

Mov bx, OFFSET DecimalDeg
MOV AX,Word ptr[bx]

mov bx,0;
Mov bx, 360
mov dx,0
Div bx
cmp dx,0
je finish
jmp continue
finish:jmp main_loop
continue:



Mov bx, offset DecimalDeg
Mov ax, word ptr[bx]
Mov bx, OFFSET PastDregree
mov si ,word ptr[bx]
sub ax,si

cmp ax,360
 jg full_cycle

Mov bx, offset DecimalDeg
Mov ax, word ptr[bx]
 MOV bx, OFFSET presentDegreeSub
Mov word ptr[bx], AX
jmp not_full_cycle

 full_cycle:
Mov bx, offset DecimalDeg
Mov ax, word ptr[bx]
mov bx,0;
Mov bx, 360
mov dx,0
Div bx

Mov bx, offset numberOfRevolutions
Mov word ptr [bx], Ax

Mov bl, al
mov bh,0
Mov ax, 360
Mul bx

Mov bx, OFFSET DecimalDeg
Mov si, AX
MOV AX, [bx]
Sub  ax, SI

MOV bx, OFFSET presentDegreeSub
Mov word ptr[bx], AX


Mov bx, OFFSET DecimalDeg
MOV cx, [bx]
cmp cx,360
jle smaller_than_360
cmp ax,0
jne smaller_than_360
MOV bx, OFFSET presentDegreeSub
Mov word ptr[bx],360
smaller_than_360:
;;;;;;;;;;;;;;;;;;
Mov bx, OFFSET DecimalDeg
MOV AX,Word ptr[bx]

MOV bx, OFFSET presentDegreeSub
SUB AX,word ptr[bx]

mov bx,0;
Mov bx, 360
mov dx,0
Div bx

Mov bx, offset numberOfRevolutions
Mov word ptr [bx], Ax

;;;;;;;;;;;;;;;;;;

Mov bx, offset numberOfRevolutions

MOV Cx, word ptr[bx]


cmp cx,0
je doNotLoop

LoopCompleteRevolution:
mov si,512
push cx

call rotate_right

pop cx
Loop LoopCompleteRevolution


not_full_cycle:
doNotLoop:

Mov bx, offset DecimalDeg
Mov ax, word ptr[bx]

Mov bx, offset PastDregree
mov si,word ptr[bx]
sub ax,si;
cmp ax,0
jl Rotate_Left_Neg

Rotate_Right_Pos:

Mov bx, OFFSET presentDegreeSub
Mov AX, WORD PTR [bx]
Mov bx, OFFSET PastDregree
MOV SI, WORD PTR [bx]
Sub ax,si



mov bx,512
mul bx
mov bx,360
div bx

mov si,ax

call rotate_right


Mov bx, OFFSET presentDegreeSub
Mov AX, WORD PTR [bx]
cmp ax,360
jle true_number
sub ax,360
true_number:
Mov bx, OFFSET PastDregree
mov word ptr[bx],ax


jmp end_of_func


Rotate_Left_Neg:


Mov bx, OFFSET PastDregree
Mov AX, WORD PTR [bx]
Mov bx, OFFSET presentDegreeSub
MOV SI, WORD PTR [bx]
Sub ax,si

mov bx,512
mul bx
mov bx,360
div bx


mov si,ax

call  rotate

Mov bx, OFFSET presentDegreeSub
Mov AX, WORD PTR [bx]
Mov bx, OFFSET PastDregree
MOV SI, WORD PTR [bx]
mov word ptr[bx],ax


end_of_func:
POP SI
POP bx
POP AX

RET



numberOfRevolutions dw 0
presentDegreeSub dw 0
PastDregree dw 0

variable db 00010001b;
DecimalDeg DW 0
DecimalSpeed DW 0
degree db 0,0,0
speed db 0,0
DISPLAY_CODE DB 09h,01h,11h,21h,08h,18h,28h,00h,10h,20h;
END START
CODE ENDS